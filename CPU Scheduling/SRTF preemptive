
  SRTF PREEMPTIVE:

#include <iostream>
#include <vector>
#include <algorithm>
#include <climits>

using namespace std;

struct Process {
    int id;
    int arrivalTime;
    int burstTime;
    int remainingTime;
    int completionTime;
    int waitingTime;
    int turnaroundTime;
};

bool compareArrivalTime(const Process &a, const Process &b) {
    return a.arrivalTime < b.arrivalTime;
}

bool compareRemainingTime(const Process &a, const Process &b) {
    return a.remainingTime < b.remainingTime;
}

void SRTF(vector<Process> &processes) {
    int n = processes.size();
    int currentTime = 0;
    int completed = 0;
    vector<int> executed(n, 0); // to track if a process is executed

    while (completed < n) {
        int shortestRemainingTime = INT_MAX;
        int shortestIndex = -1;

        for (int i = 0; i < n; i++) {
            if (processes[i].arrivalTime <= currentTime && processes[i].remainingTime < shortestRemainingTime && !executed[i]) {
                shortestRemainingTime = processes[i].remainingTime;
                shortestIndex = i;
            }
        }

        if (shortestIndex == -1) {
            currentTime++;
        } else {
            processes[shortestIndex].remainingTime--;
            currentTime++;

            if (processes[shortestIndex].remainingTime == 0) {
                completed++;
                executed[shortestIndex] = 1;
                processes[shortestIndex].completionTime = currentTime;
                processes[shortestIndex].turnaroundTime = processes[shortestIndex].completionTime - processes[shortestIndex].arrivalTime;
                processes[shortestIndex].waitingTime = processes[shortestIndex].turnaroundTime - processes[shortestIndex].burstTime;
            }
        }
    }
}

void displayProcesses(const vector<Process> &processes) {
    cout << "ID\tArrival Time\tBurst Time\tCompletion Time\tWaiting Time\tTurnaround Time\n";
    for (const Process &p : processes) {
        cout << p.id << "\t" << p.arrivalTime << "\t\t" << p.burstTime << "\t\t" << p.completionTime << "\t\t" << p.waitingTime << "\t\t" << p.turnaroundTime << "\n";
    }
}

int main() {
    int n;
    cout << "Enter the number of processes: ";
    cin >> n;

    vector<Process> processes(n);

    cout << "Enter arrival time and burst time for each process:\n";
    for (int i = 0; i < n; i++) {
        processes[i].id = i + 1;
        cout << "Process " << i + 1 << " arrival time: ";
        cin >> processes[i].arrivalTime;
        cout << "Process " << i + 1 << " burst time: ";
        cin >> processes[i].burstTime;
        processes[i].remainingTime = processes[i].burstTime;
    }
    sort(processes.begin(), processes.end(), compareArrivalTime);

    SRTF(processes);

    cout << "\nSRTF Scheduling Table:\n";
    displayProcesses(processes);

    return 0;
}
